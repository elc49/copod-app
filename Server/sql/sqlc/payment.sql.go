// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: payment.sql

package sql

import (
	"context"

	"github.com/google/uuid"
)

const clearTestPayments = `-- name: ClearTestPayments :exec
DELETE FROM payments
`

func (q *Queries) ClearTestPayments(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearTestPayments)
	return err
}

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
  email, amount, currency, reason, status, reference_id, upload_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, email, amount, currency, reason, status, reference_id, upload_id, created_at, updated_at
`

type CreatePaymentParams struct {
	Email       string        `json:"email"`
	Amount      int32         `json:"amount"`
	Currency    string        `json:"currency"`
	Reason      string        `json:"reason"`
	Status      string        `json:"status"`
	ReferenceID string        `json:"reference_id"`
	UploadID    uuid.NullUUID `json:"upload_id"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.Email,
		arg.Amount,
		arg.Currency,
		arg.Reason,
		arg.Status,
		arg.ReferenceID,
		arg.UploadID,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Amount,
		&i.Currency,
		&i.Reason,
		&i.Status,
		&i.ReferenceID,
		&i.UploadID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
