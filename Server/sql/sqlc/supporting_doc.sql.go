// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: supporting_doc.sql

package sql

import (
	"context"

	"github.com/google/uuid"
)

const createSupportDoc = `-- name: CreateSupportDoc :one
INSERT INTO support_docs (
  email, govt_id
) VALUES (
  $1, $2
) RETURNING id, govt_id, verification, email, created_at, updated_at
`

type CreateSupportDocParams struct {
	Email  string `json:"email"`
	GovtID string `json:"govt_id"`
}

func (q *Queries) CreateSupportDoc(ctx context.Context, arg CreateSupportDocParams) (SupportDoc, error) {
	row := q.db.QueryRowContext(ctx, createSupportDoc, arg.Email, arg.GovtID)
	var i SupportDoc
	err := row.Scan(
		&i.ID,
		&i.GovtID,
		&i.Verification,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSupportDocByEmail = `-- name: GetSupportDocByEmail :one
SELECT id, govt_id, verification, email, created_at, updated_at FROM support_docs
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetSupportDocByEmail(ctx context.Context, email string) (SupportDoc, error) {
	row := q.db.QueryRowContext(ctx, getSupportDocByEmail, email)
	var i SupportDoc
	err := row.Scan(
		&i.ID,
		&i.GovtID,
		&i.Verification,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSupportingDocById = `-- name: GetSupportingDocById :one
SELECT id, govt_id, verification, email, created_at, updated_at FROM support_docs
WHERE id = $1
`

func (q *Queries) GetSupportingDocById(ctx context.Context, id uuid.UUID) (SupportDoc, error) {
	row := q.db.QueryRowContext(ctx, getSupportingDocById, id)
	var i SupportDoc
	err := row.Scan(
		&i.ID,
		&i.GovtID,
		&i.Verification,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSupportingDocsByVerification = `-- name: GetSupportingDocsByVerification :many
SELECT id, govt_id, verification, email, created_at, updated_at FROM support_docs
WHERE verification = $1
`

func (q *Queries) GetSupportingDocsByVerification(ctx context.Context, verification string) ([]SupportDoc, error) {
	rows, err := q.db.QueryContext(ctx, getSupportingDocsByVerification, verification)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SupportDoc{}
	for rows.Next() {
		var i SupportDoc
		if err := rows.Scan(
			&i.ID,
			&i.GovtID,
			&i.Verification,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserSupportDocById = `-- name: UpdateUserSupportDocById :one
UPDATE support_docs SET verification = $1
WHERE id = $2
RETURNING id, govt_id, verification, email, created_at, updated_at
`

type UpdateUserSupportDocByIdParams struct {
	Verification string    `json:"verification"`
	ID           uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUserSupportDocById(ctx context.Context, arg UpdateUserSupportDocByIdParams) (SupportDoc, error) {
	row := q.db.QueryRowContext(ctx, updateUserSupportDocById, arg.Verification, arg.ID)
	var i SupportDoc
	err := row.Scan(
		&i.ID,
		&i.GovtID,
		&i.Verification,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
