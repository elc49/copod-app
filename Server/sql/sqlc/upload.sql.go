// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: upload.sql

package sql

import (
	"context"
	"database/sql"
)

const clearTestUploads = `-- name: ClearTestUploads :exec
DELETE FROM uploads
`

func (q *Queries) ClearTestUploads(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearTestUploads)
	return err
}

const createUpload = `-- name: CreateUpload :one
INSERT INTO uploads (
  type, title_doc, govt_id, email
) VALUES (
  $1, $2, $3, $4
) RETURNING id, type, title_doc, govt_id, verification, email, created_at, updated_at
`

type CreateUploadParams struct {
	Type     string         `json:"type"`
	TitleDoc sql.NullString `json:"title_doc"`
	GovtID   sql.NullString `json:"govt_id"`
	Email    string         `json:"email"`
}

func (q *Queries) CreateUpload(ctx context.Context, arg CreateUploadParams) (Upload, error) {
	row := q.db.QueryRowContext(ctx, createUpload,
		arg.Type,
		arg.TitleDoc,
		arg.GovtID,
		arg.Email,
	)
	var i Upload
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.TitleDoc,
		&i.GovtID,
		&i.Verification,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
