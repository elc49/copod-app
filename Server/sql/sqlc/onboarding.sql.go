// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: onboarding.sql

package sql

import (
	"context"

	"github.com/google/uuid"
)

const createOnboarding = `-- name: CreateOnboarding :one
INSERT INTO onboardings (
  title_id, support_doc_id, display_picture_id, email
) VALUES (
  $1, $2, $3, $4
) RETURNING id, title_id, support_doc_id, display_picture_id, email, verification, payment_status, created_at, updated_at
`

type CreateOnboardingParams struct {
	TitleID          uuid.UUID `json:"title_id"`
	SupportDocID     uuid.UUID `json:"support_doc_id"`
	DisplayPictureID uuid.UUID `json:"display_picture_id"`
	Email            string    `json:"email"`
}

func (q *Queries) CreateOnboarding(ctx context.Context, arg CreateOnboardingParams) (Onboarding, error) {
	row := q.db.QueryRowContext(ctx, createOnboarding,
		arg.TitleID,
		arg.SupportDocID,
		arg.DisplayPictureID,
		arg.Email,
	)
	var i Onboarding
	err := row.Scan(
		&i.ID,
		&i.TitleID,
		&i.SupportDocID,
		&i.DisplayPictureID,
		&i.Email,
		&i.Verification,
		&i.PaymentStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOnboardingByEmail = `-- name: GetOnboardingByEmail :one
SELECT id, title_id, support_doc_id, display_picture_id, email, verification, payment_status, created_at, updated_at FROM onboardings
WHERE email = $1
`

func (q *Queries) GetOnboardingByEmail(ctx context.Context, email string) (Onboarding, error) {
	row := q.db.QueryRowContext(ctx, getOnboardingByEmail, email)
	var i Onboarding
	err := row.Scan(
		&i.ID,
		&i.TitleID,
		&i.SupportDocID,
		&i.DisplayPictureID,
		&i.Email,
		&i.Verification,
		&i.PaymentStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOnboardingByID = `-- name: GetOnboardingByID :one
SELECT id, title_id, support_doc_id, display_picture_id, email, verification, payment_status, created_at, updated_at FROM onboardings
WHERE id = $1
`

func (q *Queries) GetOnboardingByID(ctx context.Context, id uuid.UUID) (Onboarding, error) {
	row := q.db.QueryRowContext(ctx, getOnboardingByID, id)
	var i Onboarding
	err := row.Scan(
		&i.ID,
		&i.TitleID,
		&i.SupportDocID,
		&i.DisplayPictureID,
		&i.Email,
		&i.Verification,
		&i.PaymentStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOnboardingVerificationByID = `-- name: UpdateOnboardingVerificationByID :one
UPDATE onboardings SET verification = $1
WHERE id = $2
RETURNING id, title_id, support_doc_id, display_picture_id, email, verification, payment_status, created_at, updated_at
`

type UpdateOnboardingVerificationByIDParams struct {
	Verification string    `json:"verification"`
	ID           uuid.UUID `json:"id"`
}

func (q *Queries) UpdateOnboardingVerificationByID(ctx context.Context, arg UpdateOnboardingVerificationByIDParams) (Onboarding, error) {
	row := q.db.QueryRowContext(ctx, updateOnboardingVerificationByID, arg.Verification, arg.ID)
	var i Onboarding
	err := row.Scan(
		&i.ID,
		&i.TitleID,
		&i.SupportDocID,
		&i.DisplayPictureID,
		&i.Email,
		&i.Verification,
		&i.PaymentStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
