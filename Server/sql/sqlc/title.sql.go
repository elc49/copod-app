// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: title.sql

package sql

import (
	"context"

	"github.com/google/uuid"
)

const createTitle = `-- name: CreateTitle :one
INSERT INTO title_deeds (
  url, title, email, support_doc_id
) VALUES (
  $1, $2, $3, $4
) RETURNING id, url, title, verification, email, support_doc_id, created_at, updated_at
`

type CreateTitleParams struct {
	Url          string    `json:"url"`
	Title        string    `json:"title"`
	Email        string    `json:"email"`
	SupportDocID uuid.UUID `json:"support_doc_id"`
}

func (q *Queries) CreateTitle(ctx context.Context, arg CreateTitleParams) (TitleDeed, error) {
	row := q.db.QueryRowContext(ctx, createTitle,
		arg.Url,
		arg.Title,
		arg.Email,
		arg.SupportDocID,
	)
	var i TitleDeed
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Title,
		&i.Verification,
		&i.Email,
		&i.SupportDocID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTitleByEmail = `-- name: GetTitleByEmail :one
SELECT id, url, title, verification, email, support_doc_id, created_at, updated_at FROM title_deeds
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetTitleByEmail(ctx context.Context, email string) (TitleDeed, error) {
	row := q.db.QueryRowContext(ctx, getTitleByEmail, email)
	var i TitleDeed
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Title,
		&i.Verification,
		&i.Email,
		&i.SupportDocID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTitlesByEmail = `-- name: GetTitlesByEmail :many
SELECT id, url, title, verification, email, support_doc_id, created_at, updated_at FROM title_deeds
WHERE email = $1
`

func (q *Queries) GetTitlesByEmail(ctx context.Context, email string) ([]TitleDeed, error) {
	rows, err := q.db.QueryContext(ctx, getTitlesByEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TitleDeed{}
	for rows.Next() {
		var i TitleDeed
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Title,
			&i.Verification,
			&i.Email,
			&i.SupportDocID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTitleVerificationById = `-- name: UpdateTitleVerificationById :one
UPDATE title_deeds SET verification = $1
WHERE id = $2
RETURNING id, url, title, verification, email, support_doc_id, created_at, updated_at
`

type UpdateTitleVerificationByIdParams struct {
	Verification string    `json:"verification"`
	ID           uuid.UUID `json:"id"`
}

func (q *Queries) UpdateTitleVerificationById(ctx context.Context, arg UpdateTitleVerificationByIdParams) (TitleDeed, error) {
	row := q.db.QueryRowContext(ctx, updateTitleVerificationById, arg.Verification, arg.ID)
	var i TitleDeed
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Title,
		&i.Verification,
		&i.Email,
		&i.SupportDocID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
