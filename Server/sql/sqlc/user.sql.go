// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sql

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email
) VALUES (
  $1
) RETURNING id, firstname, lastname, govt_id, email, created_at, updated_at
`

func (q *Queries) CreateUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.GovtID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, firstname, lastname, govt_id, email, created_at, updated_at FROM users
WHERE email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.GovtID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserByEmail = `-- name: UpdateUserByEmail :one
UPDATE users SET firstname = $1, lastname = $2, govt_id = $3
WHERE email = $4
RETURNING  id, firstname, lastname, govt_id, email, created_at, updated_at
`

type UpdateUserByEmailParams struct {
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
	GovtID    string `json:"govt_id"`
	Email     string `json:"email"`
}

func (q *Queries) UpdateUserByEmail(ctx context.Context, arg UpdateUserByEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserByEmail,
		arg.Firstname,
		arg.Lastname,
		arg.GovtID,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.GovtID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
