// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: early_signup.sql

package sql

import (
	"context"
)

const createEarlySignup = `-- name: CreateEarlySignup :one
INSERT INTO early_signups (
  email
) VALUES (
  $1
) RETURNING id, email, onboarded, created_at, updated_at
`

func (q *Queries) CreateEarlySignup(ctx context.Context, email string) (EarlySignup, error) {
	row := q.db.QueryRowContext(ctx, createEarlySignup, email)
	var i EarlySignup
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Onboarded,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEarlySignupByEmail = `-- name: GetEarlySignupByEmail :one
SELECT id, email, onboarded, created_at, updated_at FROM early_signups
WHERE email = $1
`

func (q *Queries) GetEarlySignupByEmail(ctx context.Context, email string) (EarlySignup, error) {
	row := q.db.QueryRowContext(ctx, getEarlySignupByEmail, email)
	var i EarlySignup
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Onboarded,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const onboardEarlySignup = `-- name: OnboardEarlySignup :one
UPDATE early_signups SET onboarded = NOW()
WHERE email = $1
RETURNING id, email, onboarded, created_at, updated_at
`

func (q *Queries) OnboardEarlySignup(ctx context.Context, email string) (EarlySignup, error) {
	row := q.db.QueryRowContext(ctx, onboardEarlySignup, email)
	var i EarlySignup
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Onboarded,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
