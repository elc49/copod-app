// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package registry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// RegistryMetaData contains all meta data concerning the Registry contract.
var RegistryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"GrantSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"titleNo\",\"type\":\"string\"}],\"name\":\"LandAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"titleNo\",\"type\":\"string\"}],\"name\":\"NoTokenizedLand\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"titleNo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"UnavailableLandSpace\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"titleNo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tenant\",\"type\":\"address\"}],\"name\":\"GrantLandUsageRights\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"titleNo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"LandCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tenant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"titleNo\",\"type\":\"string\"}],\"name\":\"ReclaimUsageRights\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"countTokenizedLands\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"titleNo_\",\"type\":\"string\"}],\"name\":\"getLandERC721Contract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"titleNo_\",\"type\":\"string\"}],\"name\":\"getLandUsagesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"titleNo_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size_\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"contractLand\",\"name\":\"landAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052348015600e575f5ffd5b50613d7a8061001c5f395ff3fe608060405234801561000f575f5ffd5b506004361061004a575f3560e01c806381e8a3121461004e578063c1e1bd6c1461007e578063c8d8db2f146100ae578063fbb4f08a146100cc575b5f5ffd5b61006860048036038101906100639190610471565b6100fc565b60405161007591906104d0565b60405180910390f35b61009860048036038101906100939190610471565b610123565b6040516100a59190610528565b60405180910390f35b6100b6610168565b6040516100c391906104d0565b60405180910390f35b6100e660048036038101906100e19190610595565b610171565b6040516100f3919061068c565b60405180910390f35b5f60038260405161010d91906106f7565b9081526020016040518091039020549050919050565b5f5f8260405161013391906106f7565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f600254905090565b5f5f73ffffffffffffffffffffffffffffffffffffffff165f8660405161019891906106f7565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614859061021f576040517faab2392e0000000000000000000000000000000000000000000000000000000081526004016102169190610755565b60405180910390fd5b50600160025f82825461023291906107a2565b925050819055505f8585858560025460405161024d90610317565b61025b9594939291906107d5565b604051809103905ff080158015610274573d5f5f3e3d5ffd5b509050805f8760405161028791906106f7565b90815260200160405180910390205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f1b57452d2e78a54b5b362116106320dbd010e047ada9f1f0c105996c898839748684604051610303929190610834565b60405180910390a180915050949350505050565b6134e28061086383390190565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6103838261033d565b810181811067ffffffffffffffff821117156103a2576103a161034d565b5b80604052505050565b5f6103b4610324565b90506103c0828261037a565b919050565b5f67ffffffffffffffff8211156103df576103de61034d565b5b6103e88261033d565b9050602081019050919050565b828183375f83830152505050565b5f610415610410846103c5565b6103ab565b90508281526020810184848401111561043157610430610339565b5b61043c8482856103f5565b509392505050565b5f82601f83011261045857610457610335565b5b8135610468848260208601610403565b91505092915050565b5f602082840312156104865761048561032d565b5b5f82013567ffffffffffffffff8111156104a3576104a2610331565b5b6104af84828501610444565b91505092915050565b5f819050919050565b6104ca816104b8565b82525050565b5f6020820190506104e35f8301846104c1565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610512826104e9565b9050919050565b61052281610508565b82525050565b5f60208201905061053b5f830184610519565b92915050565b61054a81610508565b8114610554575f5ffd5b50565b5f8135905061056581610541565b92915050565b610574816104b8565b811461057e575f5ffd5b50565b5f8135905061058f8161056b565b92915050565b5f5f5f5f608085870312156105ad576105ac61032d565b5b5f85013567ffffffffffffffff8111156105ca576105c9610331565b5b6105d687828801610444565b945050602085013567ffffffffffffffff8111156105f7576105f6610331565b5b61060387828801610444565b935050604061061487828801610557565b925050606061062587828801610581565b91505092959194509250565b5f819050919050565b5f61065461064f61064a846104e9565b610631565b6104e9565b9050919050565b5f6106658261063a565b9050919050565b5f6106768261065b565b9050919050565b6106868161066c565b82525050565b5f60208201905061069f5f83018461067d565b92915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f6106d1826106a5565b6106db81856106af565b93506106eb8185602086016106b9565b80840191505092915050565b5f61070282846106c7565b915081905092915050565b5f82825260208201905092915050565b5f610727826106a5565b610731818561070d565b93506107418185602086016106b9565b61074a8161033d565b840191505092915050565b5f6020820190508181035f83015261076d818461071d565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6107ac826104b8565b91506107b7836104b8565b92508282019050808211156107cf576107ce610775565b5b92915050565b5f60a0820190508181035f8301526107ed818861071d565b90508181036020830152610801818761071d565b90506108106040830186610519565b61081d60608301856104c1565b61082a60808301846104c1565b9695505050505050565b5f6040820190508181035f83015261084c818561071d565b905061085b60208301846104c1565b939250505056fe608060405234801561000f575f5ffd5b506040516134e23803806134e283398181016040528101906100319190610e5d565b828585815f90816100429190611113565b5080600190816100529190611113565b5050505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100c5575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100bc91906111f1565b60405180910390fd5b6100d4816101b560201b60201c565b506040518060a001604052808681526020018381526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018281525060075f820151815f0190816101279190611113565b506020820151816001015560408201518160020190816101479190611113565b506060820151816003015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550608082015181600401559050506101ab838261027860201b60201c565b5050505050611375565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610297828260405180602001604052805f81525061029b60201b60201c565b5050565b6102ab83836102c260201b60201c565b6102bd5f8484846103bb60201b60201c565b505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610332575f6040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161032991906111f1565b60405180910390fd5b5f61034483835f61057360201b60201c565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146103b6575f6040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016103ad91906111f1565b60405180910390fd5b505050565b5f8373ffffffffffffffffffffffffffffffffffffffff163b111561056d578273ffffffffffffffffffffffffffffffffffffffff1663150b7a0261040461079060201b60201c565b8685856040518563ffffffff1660e01b8152600401610426949392919061126b565b6020604051808303815f875af192505050801561046157506040513d601f19601f8201168201806040525081019061045e919061130a565b60015b6104e2573d805f811461048f576040519150601f19603f3d011682016040523d82523d5f602084013e610494565b606091505b505f8151036104da57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016104d191906111f1565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461056b57836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161056291906111f1565b60405180910390fd5b505b50505050565b5f5f6105848461079760201b60201c565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146105cb576105ca8184866107d060201b60201c565b5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461065c576106105f855f5f61089960201b60201c565b600160035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825403925050819055505b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146106db57600160035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8460025f8681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b5f33905090565b5f60025f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6107e1838383610a6460201b60201c565b610894575f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361085557806040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161084c9190611335565b60405180910390fd5b81816040517f177e802f00000000000000000000000000000000000000000000000000000000815260040161088b92919061134e565b60405180910390fd5b505050565b80806108d157505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15610a0f575f6108e684610b3060201b60201c565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561095057508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b801561096957506109678184610bbc60201b60201c565b155b156109ab57826040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016109a291906111f1565b60405180910390fd5b8115610a0d57838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b8360045f8581526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b5f5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015610b2757508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610ae25750610ae18484610bbc60201b60201c565b5b80610b2657508273ffffffffffffffffffffffffffffffffffffffff16610b0e83610c4a60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b5f5f610b418361079760201b60201c565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bb357826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610baa9190611335565b60405180910390fd5b80915050919050565b5f60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f60045f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610ce282610c9c565b810181811067ffffffffffffffff82111715610d0157610d00610cac565b5b80604052505050565b5f610d13610c83565b9050610d1f8282610cd9565b919050565b5f67ffffffffffffffff821115610d3e57610d3d610cac565b5b610d4782610c9c565b9050602081019050919050565b8281835e5f83830152505050565b5f610d74610d6f84610d24565b610d0a565b905082815260208101848484011115610d9057610d8f610c98565b5b610d9b848285610d54565b509392505050565b5f82601f830112610db757610db6610c94565b5b8151610dc7848260208601610d62565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610df982610dd0565b9050919050565b610e0981610def565b8114610e13575f5ffd5b50565b5f81519050610e2481610e00565b92915050565b5f819050919050565b610e3c81610e2a565b8114610e46575f5ffd5b50565b5f81519050610e5781610e33565b92915050565b5f5f5f5f5f60a08688031215610e7657610e75610c8c565b5b5f86015167ffffffffffffffff811115610e9357610e92610c90565b5b610e9f88828901610da3565b955050602086015167ffffffffffffffff811115610ec057610ebf610c90565b5b610ecc88828901610da3565b9450506040610edd88828901610e16565b9350506060610eee88828901610e49565b9250506080610eff88828901610e49565b9150509295509295909350565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610f5a57607f821691505b602082108103610f6d57610f6c610f16565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302610fcf7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610f94565b610fd98683610f94565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61101461100f61100a84610e2a565b610ff1565b610e2a565b9050919050565b5f819050919050565b61102d83610ffa565b6110416110398261101b565b848454610fa0565b825550505050565b5f5f905090565b611058611049565b611063818484611024565b505050565b5b818110156110865761107b5f82611050565b600181019050611069565b5050565b601f8211156110cb5761109c81610f73565b6110a584610f85565b810160208510156110b4578190505b6110c86110c085610f85565b830182611068565b50505b505050565b5f82821c905092915050565b5f6110eb5f19846008026110d0565b1980831691505092915050565b5f61110383836110dc565b9150826002028217905092915050565b61111c82610f0c565b67ffffffffffffffff81111561113557611134610cac565b5b61113f8254610f43565b61114a82828561108a565b5f60209050601f83116001811461117b575f8415611169578287015190505b61117385826110f8565b8655506111da565b601f19841661118986610f73565b5f5b828110156111b05784890151825560018201915060208501945060208101905061118b565b868310156111cd57848901516111c9601f8916826110dc565b8355505b6001600288020188555050505b505050505050565b6111eb81610def565b82525050565b5f6020820190506112045f8301846111e2565b92915050565b61121381610e2a565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f61123d82611219565b6112478185611223565b9350611257818560208601610d54565b61126081610c9c565b840191505092915050565b5f60808201905061127e5f8301876111e2565b61128b60208301866111e2565b611298604083018561120a565b81810360608301526112aa8184611233565b905095945050505050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6112e9816112b5565b81146112f3575f5ffd5b50565b5f81519050611304816112e0565b92915050565b5f6020828403121561131f5761131e610c8c565b5b5f61132c848285016112f6565b91505092915050565b5f6020820190506113485f83018461120a565b92915050565b5f6040820190506113615f8301856111e2565b61136e602083018461120a565b9392505050565b612160806113825f395ff3fe608060405234801561000f575f5ffd5b5060043610610109575f3560e01c806370a08231116100a0578063a22cb4651161006f578063a22cb465146102a3578063b88d4fde146102bf578063c87b56dd146102db578063e985e9c51461030b578063f2fde38b1461033b57610109565b806370a082311461022d578063715018a61461025d5780638da5cb5b1461026757806395d89b411461028557610109565b806323b872dd116100dc57806323b872dd146101a757806342842e0e146101c35780635690314c146101df5780636352211e146101fd57610109565b806301ffc9a71461010d57806306fdde031461013d578063081812fc1461015b578063095ea7b31461018b575b5f5ffd5b610127600480360381019061012291906118fa565b610357565b604051610134919061193f565b60405180910390f35b610145610438565b60405161015291906119c8565b60405180910390f35b61017560048036038101906101709190611a1b565b6104c7565b6040516101829190611a85565b60405180910390f35b6101a560048036038101906101a09190611ac8565b6104e2565b005b6101c160048036038101906101bc9190611b06565b6104f8565b005b6101dd60048036038101906101d89190611b06565b6105f7565b005b6101e7610616565b6040516101f49190611c47565b60405180910390f35b61021760048036038101906102129190611a1b565b6107b8565b6040516102249190611a85565b60405180910390f35b61024760048036038101906102429190611c67565b6107c9565b6040516102549190611ca1565b60405180910390f35b61026561087f565b005b61026f610892565b60405161027c9190611a85565b60405180910390f35b61028d6108ba565b60405161029a91906119c8565b60405180910390f35b6102bd60048036038101906102b89190611ce4565b61094a565b005b6102d960048036038101906102d49190611e4e565b610960565b005b6102f560048036038101906102f09190611a1b565b61097d565b60405161030291906119c8565b60405180910390f35b61032560048036038101906103209190611ece565b6109e3565b604051610332919061193f565b60405180910390f35b61035560048036038101906103509190611c67565b610a71565b005b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061042157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610431575061043082610af5565b5b9050919050565b60605f805461044690611f39565b80601f016020809104026020016040519081016040528092919081815260200182805461047290611f39565b80156104bd5780601f10610494576101008083540402835291602001916104bd565b820191905f5260205f20905b8154815290600101906020018083116104a057829003601f168201915b5050505050905090565b5f6104d182610b5e565b506104db82610be4565b9050919050565b6104f482826104ef610c1d565b610c24565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610568575f6040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161055f9190611a85565b60405180910390fd5b5f61057b8383610576610c1d565b610c36565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105f1578382826040517f64283d7b0000000000000000000000000000000000000000000000000000000081526004016105e893929190611f69565b60405180910390fd5b50505050565b61061183838360405180602001604052805f815250610960565b505050565b61061e611852565b60076040518060a00160405290815f8201805461063a90611f39565b80601f016020809104026020016040519081016040528092919081815260200182805461066690611f39565b80156106b15780601f10610688576101008083540402835291602001916106b1565b820191905f5260205f20905b81548152906001019060200180831161069457829003601f168201915b50505050508152602001600182015481526020016002820180546106d490611f39565b80601f016020809104026020016040519081016040528092919081815260200182805461070090611f39565b801561074b5780601f106107225761010080835404028352916020019161074b565b820191905f5260205f20905b81548152906001019060200180831161072e57829003601f168201915b50505050508152602001600382015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481525050905090565b5f6107c282610b5e565b9050919050565b5f5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361083a575f6040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016108319190611a85565b60405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610887610e41565b6108905f610ec8565b565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546108c990611f39565b80601f01602080910402602001604051908101604052809291908181526020018280546108f590611f39565b80156109405780601f1061091757610100808354040283529160200191610940565b820191905f5260205f20905b81548152906001019060200180831161092357829003601f168201915b5050505050905090565b61095c610955610c1d565b8383610f8b565b5050565b61096b8484846104f8565b610977848484846110f4565b50505050565b606061098882610b5e565b505f6109926112a6565b90505f8151116109b05760405180602001604052805f8152506109db565b806109ba846112bc565b6040516020016109cb929190611fd8565b6040516020818303038152906040525b915050919050565b5f60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b610a79610e41565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ae9575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610ae09190611a85565b60405180910390fd5b610af281610ec8565b50565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f5f610b6983611386565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bdb57826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610bd29190611ca1565b60405180910390fd5b80915050919050565b5f60045f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f33905090565b610c3183838360016113bf565b505050565b5f5f610c4184611386565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610c8257610c8181848661157e565b5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d0d57610cc15f855f5f6113bf565b600160035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825403925050819055505b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610d8c57600160035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8460025f8681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b610e49610c1d565b73ffffffffffffffffffffffffffffffffffffffff16610e67610892565b73ffffffffffffffffffffffffffffffffffffffff1614610ec657610e8a610c1d565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610ebd9190611a85565b60405180910390fd5b565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ffb57816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401610ff29190611a85565b60405180910390fd5b8060055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516110e7919061193f565b60405180910390a3505050565b5f8373ffffffffffffffffffffffffffffffffffffffff163b11156112a0578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02611137610c1d565b8685856040518563ffffffff1660e01b8152600401611159949392919061204d565b6020604051808303815f875af192505050801561119457506040513d601f19601f8201168201806040525081019061119191906120ab565b60015b611215573d805f81146111c2576040519150601f19603f3d011682016040523d82523d5f602084013e6111c7565b606091505b505f81510361120d57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016112049190611a85565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461129e57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016112959190611a85565b60405180910390fd5b505b50505050565b606060405180602001604052805f815250905090565b60605f60016112ca84611641565b0190505f8167ffffffffffffffff8111156112e8576112e7611d2a565b5b6040519080825280601f01601f19166020018201604052801561131a5781602001600182028036833780820191505090505b5090505f82602001820190505b60011561137b578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816113705761136f6120d6565b5b0494505f8503611327575b819350505050919050565b5f60025f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b80806113f757505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611529575f61140684610b5e565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561147057508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015611483575061148181846109e3565b155b156114c557826040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016114bc9190611a85565b60405180910390fd5b811561152757838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b8360045f8581526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b611589838383611792565b61163c575f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036115fd57806040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016115f49190611ca1565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611633929190612103565b60405180910390fd5b505050565b5f5f5f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061169d577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611693576116926120d6565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106116da576d04ee2d6d415b85acef810000000083816116d0576116cf6120d6565b5b0492506020810190505b662386f26fc10000831061170957662386f26fc1000083816116ff576116fe6120d6565b5b0492506010810190505b6305f5e1008310611732576305f5e1008381611728576117276120d6565b5b0492506008810190505b612710831061175757612710838161174d5761174c6120d6565b5b0492506004810190505b6064831061177a57606483816117705761176f6120d6565b5b0492506002810190505b600a8310611789576001810190505b80915050919050565b5f5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561184957508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061180a575061180984846109e3565b5b8061184857508273ffffffffffffffffffffffffffffffffffffffff1661183083610be4565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b6040518060a00160405280606081526020015f8152602001606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81525090565b5f604051905090565b5f5ffd5b5f5ffd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6118d9816118a5565b81146118e3575f5ffd5b50565b5f813590506118f4816118d0565b92915050565b5f6020828403121561190f5761190e61189d565b5b5f61191c848285016118e6565b91505092915050565b5f8115159050919050565b61193981611925565b82525050565b5f6020820190506119525f830184611930565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61199a82611958565b6119a48185611962565b93506119b4818560208601611972565b6119bd81611980565b840191505092915050565b5f6020820190508181035f8301526119e08184611990565b905092915050565b5f819050919050565b6119fa816119e8565b8114611a04575f5ffd5b50565b5f81359050611a15816119f1565b92915050565b5f60208284031215611a3057611a2f61189d565b5b5f611a3d84828501611a07565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611a6f82611a46565b9050919050565b611a7f81611a65565b82525050565b5f602082019050611a985f830184611a76565b92915050565b611aa781611a65565b8114611ab1575f5ffd5b50565b5f81359050611ac281611a9e565b92915050565b5f5f60408385031215611ade57611add61189d565b5b5f611aeb85828601611ab4565b9250506020611afc85828601611a07565b9150509250929050565b5f5f5f60608486031215611b1d57611b1c61189d565b5b5f611b2a86828701611ab4565b9350506020611b3b86828701611ab4565b9250506040611b4c86828701611a07565b9150509250925092565b5f82825260208201905092915050565b5f611b7082611958565b611b7a8185611b56565b9350611b8a818560208601611972565b611b9381611980565b840191505092915050565b611ba7816119e8565b82525050565b5f611bb782611a46565b9050919050565b611bc781611bad565b82525050565b5f60a083015f8301518482035f860152611be78282611b66565b9150506020830151611bfc6020860182611b9e565b5060408301518482036040860152611c148282611b66565b9150506060830151611c296060860182611bbe565b506080830151611c3c6080860182611b9e565b508091505092915050565b5f6020820190508181035f830152611c5f8184611bcd565b905092915050565b5f60208284031215611c7c57611c7b61189d565b5b5f611c8984828501611ab4565b91505092915050565b611c9b816119e8565b82525050565b5f602082019050611cb45f830184611c92565b92915050565b611cc381611925565b8114611ccd575f5ffd5b50565b5f81359050611cde81611cba565b92915050565b5f5f60408385031215611cfa57611cf961189d565b5b5f611d0785828601611ab4565b9250506020611d1885828601611cd0565b9150509250929050565b5f5ffd5b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611d6082611980565b810181811067ffffffffffffffff82111715611d7f57611d7e611d2a565b5b80604052505050565b5f611d91611894565b9050611d9d8282611d57565b919050565b5f67ffffffffffffffff821115611dbc57611dbb611d2a565b5b611dc582611980565b9050602081019050919050565b828183375f83830152505050565b5f611df2611ded84611da2565b611d88565b905082815260208101848484011115611e0e57611e0d611d26565b5b611e19848285611dd2565b509392505050565b5f82601f830112611e3557611e34611d22565b5b8135611e45848260208601611de0565b91505092915050565b5f5f5f5f60808587031215611e6657611e6561189d565b5b5f611e7387828801611ab4565b9450506020611e8487828801611ab4565b9350506040611e9587828801611a07565b925050606085013567ffffffffffffffff811115611eb657611eb56118a1565b5b611ec287828801611e21565b91505092959194509250565b5f5f60408385031215611ee457611ee361189d565b5b5f611ef185828601611ab4565b9250506020611f0285828601611ab4565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680611f5057607f821691505b602082108103611f6357611f62611f0c565b5b50919050565b5f606082019050611f7c5f830186611a76565b611f896020830185611c92565b611f966040830184611a76565b949350505050565b5f81905092915050565b5f611fb282611958565b611fbc8185611f9e565b9350611fcc818560208601611972565b80840191505092915050565b5f611fe38285611fa8565b9150611fef8284611fa8565b91508190509392505050565b5f81519050919050565b5f82825260208201905092915050565b5f61201f82611ffb565b6120298185612005565b9350612039818560208601611972565b61204281611980565b840191505092915050565b5f6080820190506120605f830187611a76565b61206d6020830186611a76565b61207a6040830185611c92565b818103606083015261208c8184612015565b905095945050505050565b5f815190506120a5816118d0565b92915050565b5f602082840312156120c0576120bf61189d565b5b5f6120cd84828501612097565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6040820190506121165f830185611a76565b6121236020830184611c92565b939250505056fea264697066735822122021902742f738e5cee7fd00cb2c3f7e6821541b08e0a588f44bd7af88681682ed64736f6c634300081c0033a2646970667358221220ee20b815ce2067b85977df588b7a14fbf9afa2fe6fd69a3a4a4b04bf3501c8ed64736f6c634300081c0033",
}

// RegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryMetaData.ABI instead.
var RegistryABI = RegistryMetaData.ABI

// RegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RegistryMetaData.Bin instead.
var RegistryBin = RegistryMetaData.Bin

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// CountTokenizedLands is a free data retrieval call binding the contract method 0xc8d8db2f.
//
// Solidity: function countTokenizedLands() view returns(uint256)
func (_Registry *RegistryCaller) CountTokenizedLands(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "countTokenizedLands")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountTokenizedLands is a free data retrieval call binding the contract method 0xc8d8db2f.
//
// Solidity: function countTokenizedLands() view returns(uint256)
func (_Registry *RegistrySession) CountTokenizedLands() (*big.Int, error) {
	return _Registry.Contract.CountTokenizedLands(&_Registry.CallOpts)
}

// CountTokenizedLands is a free data retrieval call binding the contract method 0xc8d8db2f.
//
// Solidity: function countTokenizedLands() view returns(uint256)
func (_Registry *RegistryCallerSession) CountTokenizedLands() (*big.Int, error) {
	return _Registry.Contract.CountTokenizedLands(&_Registry.CallOpts)
}

// GetLandERC721Contract is a free data retrieval call binding the contract method 0xc1e1bd6c.
//
// Solidity: function getLandERC721Contract(string titleNo_) view returns(address)
func (_Registry *RegistryCaller) GetLandERC721Contract(opts *bind.CallOpts, titleNo_ string) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getLandERC721Contract", titleNo_)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetLandERC721Contract is a free data retrieval call binding the contract method 0xc1e1bd6c.
//
// Solidity: function getLandERC721Contract(string titleNo_) view returns(address)
func (_Registry *RegistrySession) GetLandERC721Contract(titleNo_ string) (common.Address, error) {
	return _Registry.Contract.GetLandERC721Contract(&_Registry.CallOpts, titleNo_)
}

// GetLandERC721Contract is a free data retrieval call binding the contract method 0xc1e1bd6c.
//
// Solidity: function getLandERC721Contract(string titleNo_) view returns(address)
func (_Registry *RegistryCallerSession) GetLandERC721Contract(titleNo_ string) (common.Address, error) {
	return _Registry.Contract.GetLandERC721Contract(&_Registry.CallOpts, titleNo_)
}

// GetLandUsagesCount is a free data retrieval call binding the contract method 0x81e8a312.
//
// Solidity: function getLandUsagesCount(string titleNo_) view returns(uint256)
func (_Registry *RegistryCaller) GetLandUsagesCount(opts *bind.CallOpts, titleNo_ string) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getLandUsagesCount", titleNo_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLandUsagesCount is a free data retrieval call binding the contract method 0x81e8a312.
//
// Solidity: function getLandUsagesCount(string titleNo_) view returns(uint256)
func (_Registry *RegistrySession) GetLandUsagesCount(titleNo_ string) (*big.Int, error) {
	return _Registry.Contract.GetLandUsagesCount(&_Registry.CallOpts, titleNo_)
}

// GetLandUsagesCount is a free data retrieval call binding the contract method 0x81e8a312.
//
// Solidity: function getLandUsagesCount(string titleNo_) view returns(uint256)
func (_Registry *RegistryCallerSession) GetLandUsagesCount(titleNo_ string) (*big.Int, error) {
	return _Registry.Contract.GetLandUsagesCount(&_Registry.CallOpts, titleNo_)
}

// Register is a paid mutator transaction binding the contract method 0xfbb4f08a.
//
// Solidity: function register(string titleNo_, string symbol_, address owner_, uint256 size_) returns(address landAddress)
func (_Registry *RegistryTransactor) Register(opts *bind.TransactOpts, titleNo_ string, symbol_ string, owner_ common.Address, size_ *big.Int) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "register", titleNo_, symbol_, owner_, size_)
}

// Register is a paid mutator transaction binding the contract method 0xfbb4f08a.
//
// Solidity: function register(string titleNo_, string symbol_, address owner_, uint256 size_) returns(address landAddress)
func (_Registry *RegistrySession) Register(titleNo_ string, symbol_ string, owner_ common.Address, size_ *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.Register(&_Registry.TransactOpts, titleNo_, symbol_, owner_, size_)
}

// Register is a paid mutator transaction binding the contract method 0xfbb4f08a.
//
// Solidity: function register(string titleNo_, string symbol_, address owner_, uint256 size_) returns(address landAddress)
func (_Registry *RegistryTransactorSession) Register(titleNo_ string, symbol_ string, owner_ common.Address, size_ *big.Int) (*types.Transaction, error) {
	return _Registry.Contract.Register(&_Registry.TransactOpts, titleNo_, symbol_, owner_, size_)
}

// RegistryGrantLandUsageRightsIterator is returned from FilterGrantLandUsageRights and is used to iterate over the raw logs and unpacked data for GrantLandUsageRights events raised by the Registry contract.
type RegistryGrantLandUsageRightsIterator struct {
	Event *RegistryGrantLandUsageRights // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryGrantLandUsageRightsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryGrantLandUsageRights)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryGrantLandUsageRights)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryGrantLandUsageRightsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryGrantLandUsageRightsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryGrantLandUsageRights represents a GrantLandUsageRights event raised by the Registry contract.
type RegistryGrantLandUsageRights struct {
	TitleNo  string
	Size     *big.Int
	Duration *big.Int
	Tenant   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterGrantLandUsageRights is a free log retrieval operation binding the contract event 0xf94c0e377787ef5f0f7bc1a5dda137388fe9ffc6d99060e038864f4de833705e.
//
// Solidity: event GrantLandUsageRights(string titleNo, uint256 size, uint256 duration, address tenant)
func (_Registry *RegistryFilterer) FilterGrantLandUsageRights(opts *bind.FilterOpts) (*RegistryGrantLandUsageRightsIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "GrantLandUsageRights")
	if err != nil {
		return nil, err
	}
	return &RegistryGrantLandUsageRightsIterator{contract: _Registry.contract, event: "GrantLandUsageRights", logs: logs, sub: sub}, nil
}

// WatchGrantLandUsageRights is a free log subscription operation binding the contract event 0xf94c0e377787ef5f0f7bc1a5dda137388fe9ffc6d99060e038864f4de833705e.
//
// Solidity: event GrantLandUsageRights(string titleNo, uint256 size, uint256 duration, address tenant)
func (_Registry *RegistryFilterer) WatchGrantLandUsageRights(opts *bind.WatchOpts, sink chan<- *RegistryGrantLandUsageRights) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "GrantLandUsageRights")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryGrantLandUsageRights)
				if err := _Registry.contract.UnpackLog(event, "GrantLandUsageRights", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGrantLandUsageRights is a log parse operation binding the contract event 0xf94c0e377787ef5f0f7bc1a5dda137388fe9ffc6d99060e038864f4de833705e.
//
// Solidity: event GrantLandUsageRights(string titleNo, uint256 size, uint256 duration, address tenant)
func (_Registry *RegistryFilterer) ParseGrantLandUsageRights(log types.Log) (*RegistryGrantLandUsageRights, error) {
	event := new(RegistryGrantLandUsageRights)
	if err := _Registry.contract.UnpackLog(event, "GrantLandUsageRights", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryLandCreatedIterator is returned from FilterLandCreated and is used to iterate over the raw logs and unpacked data for LandCreated events raised by the Registry contract.
type RegistryLandCreatedIterator struct {
	Event *RegistryLandCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryLandCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryLandCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryLandCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryLandCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryLandCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryLandCreated represents a LandCreated event raised by the Registry contract.
type RegistryLandCreated struct {
	TitleNo string
	Size    *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterLandCreated is a free log retrieval operation binding the contract event 0x1b57452d2e78a54b5b362116106320dbd010e047ada9f1f0c105996c89883974.
//
// Solidity: event LandCreated(string titleNo, uint256 size)
func (_Registry *RegistryFilterer) FilterLandCreated(opts *bind.FilterOpts) (*RegistryLandCreatedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "LandCreated")
	if err != nil {
		return nil, err
	}
	return &RegistryLandCreatedIterator{contract: _Registry.contract, event: "LandCreated", logs: logs, sub: sub}, nil
}

// WatchLandCreated is a free log subscription operation binding the contract event 0x1b57452d2e78a54b5b362116106320dbd010e047ada9f1f0c105996c89883974.
//
// Solidity: event LandCreated(string titleNo, uint256 size)
func (_Registry *RegistryFilterer) WatchLandCreated(opts *bind.WatchOpts, sink chan<- *RegistryLandCreated) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "LandCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryLandCreated)
				if err := _Registry.contract.UnpackLog(event, "LandCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLandCreated is a log parse operation binding the contract event 0x1b57452d2e78a54b5b362116106320dbd010e047ada9f1f0c105996c89883974.
//
// Solidity: event LandCreated(string titleNo, uint256 size)
func (_Registry *RegistryFilterer) ParseLandCreated(log types.Log) (*RegistryLandCreated, error) {
	event := new(RegistryLandCreated)
	if err := _Registry.contract.UnpackLog(event, "LandCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryReclaimUsageRightsIterator is returned from FilterReclaimUsageRights and is used to iterate over the raw logs and unpacked data for ReclaimUsageRights events raised by the Registry contract.
type RegistryReclaimUsageRightsIterator struct {
	Event *RegistryReclaimUsageRights // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryReclaimUsageRightsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryReclaimUsageRights)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryReclaimUsageRights)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryReclaimUsageRightsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryReclaimUsageRightsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryReclaimUsageRights represents a ReclaimUsageRights event raised by the Registry contract.
type RegistryReclaimUsageRights struct {
	Size    *big.Int
	Tenant  common.Address
	TitleNo string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterReclaimUsageRights is a free log retrieval operation binding the contract event 0x5b63c26b532e3b4ada8ad7e279e8d5302b37cf72a03ceb4be7e5734ecc078ece.
//
// Solidity: event ReclaimUsageRights(uint256 size, address tenant, string titleNo)
func (_Registry *RegistryFilterer) FilterReclaimUsageRights(opts *bind.FilterOpts) (*RegistryReclaimUsageRightsIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "ReclaimUsageRights")
	if err != nil {
		return nil, err
	}
	return &RegistryReclaimUsageRightsIterator{contract: _Registry.contract, event: "ReclaimUsageRights", logs: logs, sub: sub}, nil
}

// WatchReclaimUsageRights is a free log subscription operation binding the contract event 0x5b63c26b532e3b4ada8ad7e279e8d5302b37cf72a03ceb4be7e5734ecc078ece.
//
// Solidity: event ReclaimUsageRights(uint256 size, address tenant, string titleNo)
func (_Registry *RegistryFilterer) WatchReclaimUsageRights(opts *bind.WatchOpts, sink chan<- *RegistryReclaimUsageRights) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "ReclaimUsageRights")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryReclaimUsageRights)
				if err := _Registry.contract.UnpackLog(event, "ReclaimUsageRights", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReclaimUsageRights is a log parse operation binding the contract event 0x5b63c26b532e3b4ada8ad7e279e8d5302b37cf72a03ceb4be7e5734ecc078ece.
//
// Solidity: event ReclaimUsageRights(uint256 size, address tenant, string titleNo)
func (_Registry *RegistryFilterer) ParseReclaimUsageRights(log types.Log) (*RegistryReclaimUsageRights, error) {
	event := new(RegistryReclaimUsageRights)
	if err := _Registry.contract.UnpackLog(event, "ReclaimUsageRights", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
