# GraphQL schema example
# Document type
scalar UUID
scalar Time

# Verification status
enum Verification {
  ONBOARDING
  VERIFIED
  REJECTED
}

# Paid for
enum PaidFor {
  PAID
  NOT_PAID
}

# Payment status
enum PaymentStatus {
  success
  failed
  pending
  timeout
}

# PaymentReason
enum PaymentReason {
  LAND_REGISTRY
}

# Title
type Title {
  id: UUID!
  url: String!
  verified: Verification!
  support_doc_id: UUID!
  created_at: Time!
  updated_at: Time!
}

# SupportingDoc
type SupportingDoc {
  id: UUID!
  url: String!
  email: String!
  verified: Verification!
  created_at: Time!
  updated_at: Time!
}

# User
type User {
  id: UUID!
  firstname: String
  lastname: String
  email: String!
  created_at: Time!
  updated_at: Time!
}

# Payment
type Payment {
  id: UUID!
  reference_id: String!
  status: String!
  email: String!
  onboarding: Onboarding
  onboarding_id: UUID!
  supportingDoc: SupportingDoc
  created_at: Time!
  updated_at: Time!
}

# Onboarding
type Onboarding {
  id: UUID!
  titleId: UUID!
  supportDocId: UUID!
  displayPictureId: UUID!
  verification: Verification!
  created_at: Time!
  updated_at: Time!
}

# DisplayPicture
type DisplayPicture {
  id: UUID!
  url: String!
  email: String!
  verified: Verification!
  created_at: Time!
  updated_at: Time!
}

# Payment update
type PaymentUpdate {
  referenceId: String!
  status: String!
  email: String!
}

input PayWithMpesaInput {
  reason: PaymentReason!
  phone: String!
  email: String!
  currency: String!
  paymentFor: UUID!
}

input CreateUserInput {
  email: String!
  firstname: String!
  lastname: String!
  supportDocUrl: String!
  verification: Verification!
  supportDocId: UUID!
}

input CreateOnboardingInput {
  email: String!
  titleUrl: String!
  supportdocUrl: String!
  displayPictureUrl: String!
}

input UpdateOnboardingStatusInput {
  onboardingId: UUID!
  verification: Verification!
}

input GetOnboardingByVerificationAndPaymentStatusInput {
  verification: Verification!
  paymentStatus: PaymentStatus!
}

type Query {
  getUserLands(email: String!): [Title!]!
  getPaymentsByStatus(status: PaymentStatus!): [Payment!]!
  getPaymentDetailsById(id: UUID!): Payment!
  getSupportingDocsByVerification(verification: Verification!): [SupportingDoc!]!
  getSupportingDocById(id: UUID!): SupportingDoc!
  getOnboardingByVerificationAndPaymentStatus(input: GetOnboardingByVerificationAndPaymentStatusInput!): [Onboarding!]!
  getOnboardingByEmail(email: String!): Onboarding!
}

type Mutation {
  chargeMpesa(input: PayWithMpesaInput!): String
  createUser(input: CreateUserInput!): User!
  createOnboarding(input: CreateOnboardingInput!): Onboarding!
  updateOnboardingVerification(input: UpdateOnboardingStatusInput!): Onboarding!
}

type Subscription {
  paymentUpdate(email: String!): PaymentUpdate!
}
