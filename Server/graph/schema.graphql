# GraphQL schema example
# Document type
scalar UUID
scalar Time

# Verification status
enum Verification {
  ONBOARDING
  VERIFIED
  REJECTED
}

# Paid for
enum PaidFor {
  PAID
  NOT_PAID
}

# Payment status
enum PaymentStatus {
  success
  failed
  pending
  timeout
}

# PaymentReason
enum PaymentReason {
  LAND_REGISTRY
}

# Land
type Land {
  id: UUID!
  title: String!
  size: Int!
  symbol: String!
  town: String
  titleDocument: String!
  verified: Verification!
  created_at: Time!
  updated_at: Time!
}

# Title
type Title {
  id: UUID!
  title: String!
  verified: Verification!
  created_at: Time!
  updated_at: Time!
}

# SupportingDoc
type SupportingDoc {
  id: UUID!
  govt_id: String!
  email: String!
  verified: Verification!
  created_at: Time!
  updated_at: Time!
}

# User
type User {
  id: UUID!
  firstname: String
  lastname: String
  govt_id: String!
  email: String!
  created_at: Time!
  updated_at: Time!
}

# Payment
type Payment {
  id: UUID!
  reference_id: String!
  status: String!
  email: String!
  title: Title
  title_id: UUID!
  supportingDoc: SupportingDoc
  created_at: Time!
  updated_at: Time!
}

# Payment update
type PaymentUpdate {
  referenceId: String!
  status: String!
  email: String!
}

input DocUploadInput {
  url: String!
  email: String!
}

input PayWithMpesaInput {
  reason: PaymentReason!
  phone: String!
  email: String!
  currency: String!
  paymentFor: UUID!
}

input UpdateTitleVerificationInput {
  id: UUID!
  verification: Verification!
}

input CreateUserInput {
  email: String!
  firstname: String!
  lastname: String!
  govtid: String!
  verification: Verification!
  supportDocId: UUID!
}

type Query {
  getLocalLands: [Land!]!
  getUserLands(email: String!): [Title!]!
  getPaymentsByStatus(status: PaymentStatus!): [Payment!]!
  getPaymentDetailsById(id: UUID!): Payment!
  getSupportingDocsByVerification(verification: Verification!): [SupportingDoc!]!
  getSupportingDocById(id: UUID!): SupportingDoc!
}

type Mutation {
  uploadLandTitle(input: DocUploadInput!): Title!
  uploadSupportingDoc(input: DocUploadInput!): SupportingDoc!
  chargeMpesa(input: PayWithMpesaInput!): String
  updateTitleVerificationById(input: UpdateTitleVerificationInput!): Title!
  createUser(input: CreateUserInput!): User!
}

type Subscription {
  paymentUpdate(email: String!): PaymentUpdate!
}
