package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"

	"github.com/elc49/copod/cache"
	"github.com/elc49/copod/graph/model"
	"github.com/elc49/copod/paystack"
	sql "github.com/elc49/copod/sql/sqlc"
	"github.com/elc49/copod/util"
	"github.com/google/uuid"
	"github.com/sirupsen/logrus"
)

// UploadLandTitle is the resolver for the uploadLandTitle field.
func (r *mutationResolver) UploadLandTitle(ctx context.Context, input model.DocUploadInput) (*model.Title, error) {
	args := sql.CreateTitleParams{
		Email: input.Email,
		Url:   input.URL,
	}

	title, err := r.titleController.CreateTitle(ctx, args)
	if err != nil {
		r.log.WithError(err).WithFields(logrus.Fields{"input": input}).Errorf("resolver: UploadLandTitle")
		return nil, err
	}

	return title, nil
}

// UploadSupportingDoc is the resolver for the uploadSupportingDoc field.
func (r *mutationResolver) UploadSupportingDoc(ctx context.Context, input model.DocUploadInput) (*model.SupportingDoc, error) {
	args := sql.CreateSupportDocParams{
		Email: input.Email,
		Url:   input.URL,
	}

	doc, err := r.supportDocController.CreateSupportingDoc(ctx, args)
	if err != nil {
		r.log.WithError(err).WithFields(logrus.Fields{"input": input}).Errorf("resolver: CreateSupportingDoc")
		return nil, err
	}

	return doc, nil
}

// ChargeMpesa is the resolver for the chargeMpesa field.
func (r *mutationResolver) ChargeMpesa(ctx context.Context, input model.PayWithMpesaInput) (*string, error) {
	charge := paystack.MpesaCharge{
		Email:    input.Email,
		Reason:   input.Reason.String(),
		Currency: input.Currency,
	}

	res, err := r.paystack.ChargeMpesa(ctx, input.PaymentFor, charge)
	if err != nil {
		r.log.WithError(err).WithFields(logrus.Fields{"charge": charge}).Errorf("graph resolvers: ChargeMpesa")
		return nil, err
	}

	return &res.Data.Reference, nil
}

// UpdateTitleVerificationByID is the resolver for the updateTitleVerificationById field.
func (r *mutationResolver) UpdateTitleVerificationByID(ctx context.Context, input model.UpdateTitleVerificationInput) (*model.Title, error) {
	args := sql.UpdateTitleVerificationByIdParams{
		ID:           input.ID,
		Verification: input.Verification.String(),
	}

	title, err := r.titleController.UpdateTitleVerificationById(ctx, args)
	if err != nil {
		r.log.WithError(err).WithFields(logrus.Fields{"input": input}).Errorf("resolver: UpdateTitleVerificationById")
		return nil, err
	}

	return title, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	args := sql.CreateUserParams{
		Email:     input.Email,
		Firstname: input.Firstname,
		Lastname:  input.Lastname,
	}
	u, err := r.userController.CreateUser(ctx, args)
	if err != nil {
		return nil, err
	}

	uargs := sql.UpdateSupportDocVerificationByIdParams{
		ID:           input.SupportDocID,
		Verification: input.Verification.String(),
	}
	if _, err = r.supportDocController.UpdateSupportDocVerificationById(ctx, uargs); err != nil {
		return nil, err
	}

	return u, err
}

// Title is the resolver for the title field.
func (r *paymentResolver) Title(ctx context.Context, obj *model.Payment) (*model.Title, error) {
	title, err := r.paymentController.GetPaymentTitleByID(ctx, obj.TitleID)
	if err != nil {
		r.log.WithError(err).WithFields(logrus.Fields{"title_id": obj.TitleID}).Errorf("resolver: Title for payment")
		return nil, err
	}

	return title, nil
}

// GetUserLands is the resolver for the getUserLands field.
func (r *queryResolver) GetUserLands(ctx context.Context, email string) ([]*model.Title, error) {
	lands, err := r.titleController.GetTitlesByEmail(ctx, email)
	if err != nil {
		r.log.WithError(err).WithFields(logrus.Fields{"email": email}).Errorf("resolver: GetUserLands")
		return nil, err
	}

	return lands, nil
}

// GetPaymentsByStatus is the resolver for the getPaymentsByStatus field.
func (r *queryResolver) GetPaymentsByStatus(ctx context.Context, status model.PaymentStatus) ([]*model.Payment, error) {
	payments, err := r.paymentController.GetPaymentsByStatus(ctx, status.String())
	if err != nil {
		r.log.WithError(err).WithFields(logrus.Fields{"status": status.String()}).Errorf("resolver: GetPaymentsByStatus")
		return nil, err
	}

	return payments, nil
}

// GetPaymentDetailsByID is the resolver for the getPaymentDetailsById field.
func (r *queryResolver) GetPaymentDetailsByID(ctx context.Context, id uuid.UUID) (*model.Payment, error) {
	payment, err := r.paymentController.GetPaymentDetailsByID(ctx, id)
	if err != nil {
		r.log.WithError(err).WithFields(logrus.Fields{"id": id}).Errorf("resolver: GetPaymentDetailsByID")
		return nil, err
	}

	return payment, nil
}

// GetSupportingDocsByVerification is the resolver for the getSupportingDocsByVerification field.
func (r *queryResolver) GetSupportingDocsByVerification(ctx context.Context, verification model.Verification) ([]*model.SupportingDoc, error) {
	docs, err := r.supportDocController.GetSupportingDocsByVerification(ctx, verification)
	if err != nil {
		r.log.WithError(err).WithFields(logrus.Fields{"verification": verification}).Errorf("resolver: GetSupportingDocsByVerification")
		return nil, err
	}

	return docs, nil
}

// GetSupportingDocByID is the resolver for the getSupportingDocById field.
func (r *queryResolver) GetSupportingDocByID(ctx context.Context, id uuid.UUID) (*model.SupportingDoc, error) {
	doc, err := r.supportDocController.GetSupportingDocByID(ctx, id)
	if err != nil {
		r.log.WithError(err).WithFields(logrus.Fields{"id": id}).Errorf("resolver: GetSupportingDocByID")
		return nil, err
	}

	return doc, nil
}

// PaymentUpdate is the resolver for the paymentUpdate field.
func (r *subscriptionResolver) PaymentUpdate(ctx context.Context, email string) (<-chan *model.PaymentUpdate, error) {
	ch := make(chan *model.PaymentUpdate)
	pubsub := r.redis.Subscribe(context.Background(), cache.PAYMENT_UPDATED_CHANNEL)

	go func() {
		for msg := range pubsub.Channel() {
			var result *model.PaymentUpdate
			if err := util.DecodeJson([]byte(msg.Payload), &result); err != nil {
				r.log.WithError(err).WithFields(logrus.Fields{"payload": msg.Payload}).Errorf("resolvers: DecodeJson msg.Payload")
				return
			}

			if result.Email == email {
				ch <- result
			}
		}
	}()

	return ch, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Payment returns PaymentResolver implementation.
func (r *Resolver) Payment() PaymentResolver { return &paymentResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type paymentResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
