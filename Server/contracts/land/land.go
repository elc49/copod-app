// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package land

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// LandDetails is an auto generated low-level Go binding around an user-defined struct.
type LandDetails struct {
	TitleNo      string
	Size         *big.Int
	Symbol       string
	Owner        common.Address
	TokenId      *big.Int
	Registration *big.Int
}

// LandMetaData contains all meta data concerning the Land contract.
var LandMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"titleNo_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registration_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLand\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"titleNo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"addresspayable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registration\",\"type\":\"uint256\"}],\"internalType\":\"structLandDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f5ffd5b5060405161352838038061352883398181016040528101906100319190610e6e565b838686815f90816100429190611136565b5080600190816100529190611136565b5050505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100c5575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100bc9190611214565b60405180910390fd5b6100d4816101c660201b60201c565b506040518060c001604052808781526020018481526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281525060075f820151815f01908161012d9190611136565b5060208201518160010155604082015181600201908161014d9190611136565b506060820151816003015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a082015181600501559050506101bb848361028960201b60201c565b505050505050611398565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6102a8828260405180602001604052805f8152506102ac60201b60201c565b5050565b6102bc83836102d360201b60201c565b6102ce5f8484846103cc60201b60201c565b505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610343575f6040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161033a9190611214565b60405180910390fd5b5f61035583835f61058460201b60201c565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146103c7575f6040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016103be9190611214565b60405180910390fd5b505050565b5f8373ffffffffffffffffffffffffffffffffffffffff163b111561057e578273ffffffffffffffffffffffffffffffffffffffff1663150b7a026104156107a160201b60201c565b8685856040518563ffffffff1660e01b8152600401610437949392919061128e565b6020604051808303815f875af192505050801561047257506040513d601f19601f8201168201806040525081019061046f919061132d565b60015b6104f3573d805f81146104a0576040519150601f19603f3d011682016040523d82523d5f602084013e6104a5565b606091505b505f8151036104eb57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016104e29190611214565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461057c57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016105739190611214565b60405180910390fd5b505b50505050565b5f5f610595846107a860201b60201c565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146105dc576105db8184866107e160201b60201c565b5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461066d576106215f855f5f6108aa60201b60201c565b600160035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825403925050819055505b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146106ec57600160035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8460025f8681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b5f33905090565b5f60025f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6107f2838383610a7560201b60201c565b6108a5575f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361086657806040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161085d9190611358565b60405180910390fd5b81816040517f177e802f00000000000000000000000000000000000000000000000000000000815260040161089c929190611371565b60405180910390fd5b505050565b80806108e257505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15610a20575f6108f784610b4160201b60201c565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561096157508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b801561097a57506109788184610bcd60201b60201c565b155b156109bc57826040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016109b39190611214565b60405180910390fd5b8115610a1e57838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b8360045f8581526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b5f5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015610b3857508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610af35750610af28484610bcd60201b60201c565b5b80610b3757508273ffffffffffffffffffffffffffffffffffffffff16610b1f83610c5b60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b5f5f610b52836107a860201b60201c565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bc457826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610bbb9190611358565b60405180910390fd5b80915050919050565b5f60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f60045f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610cf382610cad565b810181811067ffffffffffffffff82111715610d1257610d11610cbd565b5b80604052505050565b5f610d24610c94565b9050610d308282610cea565b919050565b5f67ffffffffffffffff821115610d4f57610d4e610cbd565b5b610d5882610cad565b9050602081019050919050565b8281835e5f83830152505050565b5f610d85610d8084610d35565b610d1b565b905082815260208101848484011115610da157610da0610ca9565b5b610dac848285610d65565b509392505050565b5f82601f830112610dc857610dc7610ca5565b5b8151610dd8848260208601610d73565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610e0a82610de1565b9050919050565b610e1a81610e00565b8114610e24575f5ffd5b50565b5f81519050610e3581610e11565b92915050565b5f819050919050565b610e4d81610e3b565b8114610e57575f5ffd5b50565b5f81519050610e6881610e44565b92915050565b5f5f5f5f5f5f60c08789031215610e8857610e87610c9d565b5b5f87015167ffffffffffffffff811115610ea557610ea4610ca1565b5b610eb189828a01610db4565b965050602087015167ffffffffffffffff811115610ed257610ed1610ca1565b5b610ede89828a01610db4565b9550506040610eef89828a01610e27565b9450506060610f0089828a01610e5a565b9350506080610f1189828a01610e5a565b92505060a0610f2289828a01610e5a565b9150509295509295509295565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610f7d57607f821691505b602082108103610f9057610f8f610f39565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302610ff27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610fb7565b610ffc8683610fb7565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61103761103261102d84610e3b565b611014565b610e3b565b9050919050565b5f819050919050565b6110508361101d565b61106461105c8261103e565b848454610fc3565b825550505050565b5f5f905090565b61107b61106c565b611086818484611047565b505050565b5b818110156110a95761109e5f82611073565b60018101905061108c565b5050565b601f8211156110ee576110bf81610f96565b6110c884610fa8565b810160208510156110d7578190505b6110eb6110e385610fa8565b83018261108b565b50505b505050565b5f82821c905092915050565b5f61110e5f19846008026110f3565b1980831691505092915050565b5f61112683836110ff565b9150826002028217905092915050565b61113f82610f2f565b67ffffffffffffffff81111561115857611157610cbd565b5b6111628254610f66565b61116d8282856110ad565b5f60209050601f83116001811461119e575f841561118c578287015190505b611196858261111b565b8655506111fd565b601f1984166111ac86610f96565b5f5b828110156111d3578489015182556001820191506020850194506020810190506111ae565b868310156111f057848901516111ec601f8916826110ff565b8355505b6001600288020188555050505b505050505050565b61120e81610e00565b82525050565b5f6020820190506112275f830184611205565b92915050565b61123681610e3b565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f6112608261123c565b61126a8185611246565b935061127a818560208601610d65565b61128381610cad565b840191505092915050565b5f6080820190506112a15f830187611205565b6112ae6020830186611205565b6112bb604083018561122d565b81810360608301526112cd8184611256565b905095945050505050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61130c816112d8565b8114611316575f5ffd5b50565b5f8151905061132781611303565b92915050565b5f6020828403121561134257611341610c9d565b5b5f61134f84828501611319565b91505092915050565b5f60208201905061136b5f83018461122d565b92915050565b5f6040820190506113845f830185611205565b611391602083018461122d565b9392505050565b612183806113a55f395ff3fe608060405234801561000f575f5ffd5b5060043610610109575f3560e01c806370a08231116100a0578063a22cb4651161006f578063a22cb465146102a3578063b88d4fde146102bf578063c87b56dd146102db578063e985e9c51461030b578063f2fde38b1461033b57610109565b806370a082311461022d578063715018a61461025d5780638da5cb5b1461026757806395d89b411461028557610109565b806323b872dd116100dc57806323b872dd146101a757806342842e0e146101c35780635690314c146101df5780636352211e146101fd57610109565b806301ffc9a71461010d57806306fdde031461013d578063081812fc1461015b578063095ea7b31461018b575b5f5ffd5b6101276004803603810190610122919061190a565b610357565b604051610134919061194f565b60405180910390f35b610145610438565b60405161015291906119d8565b60405180910390f35b61017560048036038101906101709190611a2b565b6104c7565b6040516101829190611a95565b60405180910390f35b6101a560048036038101906101a09190611ad8565b6104e2565b005b6101c160048036038101906101bc9190611b16565b6104f8565b005b6101dd60048036038101906101d89190611b16565b6105f7565b005b6101e7610616565b6040516101f49190611c6a565b60405180910390f35b61021760048036038101906102129190611a2b565b6107c2565b6040516102249190611a95565b60405180910390f35b61024760048036038101906102429190611c8a565b6107d3565b6040516102549190611cc4565b60405180910390f35b610265610889565b005b61026f61089c565b60405161027c9190611a95565b60405180910390f35b61028d6108c4565b60405161029a91906119d8565b60405180910390f35b6102bd60048036038101906102b89190611d07565b610954565b005b6102d960048036038101906102d49190611e71565b61096a565b005b6102f560048036038101906102f09190611a2b565b610987565b60405161030291906119d8565b60405180910390f35b61032560048036038101906103209190611ef1565b6109ed565b604051610332919061194f565b60405180910390f35b61035560048036038101906103509190611c8a565b610a7b565b005b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061042157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610431575061043082610aff565b5b9050919050565b60605f805461044690611f5c565b80601f016020809104026020016040519081016040528092919081815260200182805461047290611f5c565b80156104bd5780601f10610494576101008083540402835291602001916104bd565b820191905f5260205f20905b8154815290600101906020018083116104a057829003601f168201915b5050505050905090565b5f6104d182610b68565b506104db82610bee565b9050919050565b6104f482826104ef610c27565b610c2e565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610568575f6040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161055f9190611a95565b60405180910390fd5b5f61057b8383610576610c27565b610c40565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105f1578382826040517f64283d7b0000000000000000000000000000000000000000000000000000000081526004016105e893929190611f8c565b60405180910390fd5b50505050565b61061183838360405180602001604052805f81525061096a565b505050565b61061e61185c565b60076040518060c00160405290815f8201805461063a90611f5c565b80601f016020809104026020016040519081016040528092919081815260200182805461066690611f5c565b80156106b15780601f10610688576101008083540402835291602001916106b1565b820191905f5260205f20905b81548152906001019060200180831161069457829003601f168201915b50505050508152602001600182015481526020016002820180546106d490611f5c565b80601f016020809104026020016040519081016040528092919081815260200182805461070090611f5c565b801561074b5780601f106107225761010080835404028352916020019161074b565b820191905f5260205f20905b81548152906001019060200180831161072e57829003601f168201915b50505050508152602001600382015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160048201548152602001600582015481525050905090565b5f6107cc82610b68565b9050919050565b5f5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610844575f6040517f89c62b6400000000000000000000000000000000000000000000000000000000815260040161083b9190611a95565b60405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610891610e4b565b61089a5f610ed2565b565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546108d390611f5c565b80601f01602080910402602001604051908101604052809291908181526020018280546108ff90611f5c565b801561094a5780601f106109215761010080835404028352916020019161094a565b820191905f5260205f20905b81548152906001019060200180831161092d57829003601f168201915b5050505050905090565b61096661095f610c27565b8383610f95565b5050565b6109758484846104f8565b610981848484846110fe565b50505050565b606061099282610b68565b505f61099c6112b0565b90505f8151116109ba5760405180602001604052805f8152506109e5565b806109c4846112c6565b6040516020016109d5929190611ffb565b6040516020818303038152906040525b915050919050565b5f60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b610a83610e4b565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610af3575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610aea9190611a95565b60405180910390fd5b610afc81610ed2565b50565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f5f610b7383611390565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610be557826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610bdc9190611cc4565b60405180910390fd5b80915050919050565b5f60045f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f33905090565b610c3b83838360016113c9565b505050565b5f5f610c4b84611390565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610c8c57610c8b818486611588565b5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d1757610ccb5f855f5f6113c9565b600160035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825403925050819055505b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610d9657600160035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8460025f8681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b610e53610c27565b73ffffffffffffffffffffffffffffffffffffffff16610e7161089c565b73ffffffffffffffffffffffffffffffffffffffff1614610ed057610e94610c27565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610ec79190611a95565b60405180910390fd5b565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361100557816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401610ffc9190611a95565b60405180910390fd5b8060055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516110f1919061194f565b60405180910390a3505050565b5f8373ffffffffffffffffffffffffffffffffffffffff163b11156112aa578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02611141610c27565b8685856040518563ffffffff1660e01b81526004016111639493929190612070565b6020604051808303815f875af192505050801561119e57506040513d601f19601f8201168201806040525081019061119b91906120ce565b60015b61121f573d805f81146111cc576040519150601f19603f3d011682016040523d82523d5f602084013e6111d1565b606091505b505f81510361121757836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161120e9190611a95565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146112a857836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161129f9190611a95565b60405180910390fd5b505b50505050565b606060405180602001604052805f815250905090565b60605f60016112d48461164b565b0190505f8167ffffffffffffffff8111156112f2576112f1611d4d565b5b6040519080825280601f01601f1916602001820160405280156113245781602001600182028036833780820191505090505b5090505f82602001820190505b600115611385578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161137a576113796120f9565b5b0494505f8503611331575b819350505050919050565b5f60025f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b808061140157505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611533575f61141084610b68565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561147a57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b801561148d575061148b81846109ed565b155b156114cf57826040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016114c69190611a95565b60405180910390fd5b811561153157838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b8360045f8581526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b61159383838361179c565b611646575f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361160757806040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016115fe9190611cc4565b60405180910390fd5b81816040517f177e802f00000000000000000000000000000000000000000000000000000000815260040161163d929190612126565b60405180910390fd5b505050565b5f5f5f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106116a7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161169d5761169c6120f9565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106116e4576d04ee2d6d415b85acef810000000083816116da576116d96120f9565b5b0492506020810190505b662386f26fc10000831061171357662386f26fc100008381611709576117086120f9565b5b0492506010810190505b6305f5e100831061173c576305f5e1008381611732576117316120f9565b5b0492506008810190505b6127108310611761576127108381611757576117566120f9565b5b0492506004810190505b60648310611784576064838161177a576117796120f9565b5b0492506002810190505b600a8310611793576001810190505b80915050919050565b5f5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561185357508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611814575061181384846109ed565b5b8061185257508273ffffffffffffffffffffffffffffffffffffffff1661183a83610bee565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b6040518060c00160405280606081526020015f8152602001606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81525090565b5f604051905090565b5f5ffd5b5f5ffd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6118e9816118b5565b81146118f3575f5ffd5b50565b5f81359050611904816118e0565b92915050565b5f6020828403121561191f5761191e6118ad565b5b5f61192c848285016118f6565b91505092915050565b5f8115159050919050565b61194981611935565b82525050565b5f6020820190506119625f830184611940565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6119aa82611968565b6119b48185611972565b93506119c4818560208601611982565b6119cd81611990565b840191505092915050565b5f6020820190508181035f8301526119f081846119a0565b905092915050565b5f819050919050565b611a0a816119f8565b8114611a14575f5ffd5b50565b5f81359050611a2581611a01565b92915050565b5f60208284031215611a4057611a3f6118ad565b5b5f611a4d84828501611a17565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611a7f82611a56565b9050919050565b611a8f81611a75565b82525050565b5f602082019050611aa85f830184611a86565b92915050565b611ab781611a75565b8114611ac1575f5ffd5b50565b5f81359050611ad281611aae565b92915050565b5f5f60408385031215611aee57611aed6118ad565b5b5f611afb85828601611ac4565b9250506020611b0c85828601611a17565b9150509250929050565b5f5f5f60608486031215611b2d57611b2c6118ad565b5b5f611b3a86828701611ac4565b9350506020611b4b86828701611ac4565b9250506040611b5c86828701611a17565b9150509250925092565b5f82825260208201905092915050565b5f611b8082611968565b611b8a8185611b66565b9350611b9a818560208601611982565b611ba381611990565b840191505092915050565b611bb7816119f8565b82525050565b5f611bc782611a56565b9050919050565b611bd781611bbd565b82525050565b5f60c083015f8301518482035f860152611bf78282611b76565b9150506020830151611c0c6020860182611bae565b5060408301518482036040860152611c248282611b76565b9150506060830151611c396060860182611bce565b506080830151611c4c6080860182611bae565b5060a0830151611c5f60a0860182611bae565b508091505092915050565b5f6020820190508181035f830152611c828184611bdd565b905092915050565b5f60208284031215611c9f57611c9e6118ad565b5b5f611cac84828501611ac4565b91505092915050565b611cbe816119f8565b82525050565b5f602082019050611cd75f830184611cb5565b92915050565b611ce681611935565b8114611cf0575f5ffd5b50565b5f81359050611d0181611cdd565b92915050565b5f5f60408385031215611d1d57611d1c6118ad565b5b5f611d2a85828601611ac4565b9250506020611d3b85828601611cf3565b9150509250929050565b5f5ffd5b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611d8382611990565b810181811067ffffffffffffffff82111715611da257611da1611d4d565b5b80604052505050565b5f611db46118a4565b9050611dc08282611d7a565b919050565b5f67ffffffffffffffff821115611ddf57611dde611d4d565b5b611de882611990565b9050602081019050919050565b828183375f83830152505050565b5f611e15611e1084611dc5565b611dab565b905082815260208101848484011115611e3157611e30611d49565b5b611e3c848285611df5565b509392505050565b5f82601f830112611e5857611e57611d45565b5b8135611e68848260208601611e03565b91505092915050565b5f5f5f5f60808587031215611e8957611e886118ad565b5b5f611e9687828801611ac4565b9450506020611ea787828801611ac4565b9350506040611eb887828801611a17565b925050606085013567ffffffffffffffff811115611ed957611ed86118b1565b5b611ee587828801611e44565b91505092959194509250565b5f5f60408385031215611f0757611f066118ad565b5b5f611f1485828601611ac4565b9250506020611f2585828601611ac4565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680611f7357607f821691505b602082108103611f8657611f85611f2f565b5b50919050565b5f606082019050611f9f5f830186611a86565b611fac6020830185611cb5565b611fb96040830184611a86565b949350505050565b5f81905092915050565b5f611fd582611968565b611fdf8185611fc1565b9350611fef818560208601611982565b80840191505092915050565b5f6120068285611fcb565b91506120128284611fcb565b91508190509392505050565b5f81519050919050565b5f82825260208201905092915050565b5f6120428261201e565b61204c8185612028565b935061205c818560208601611982565b61206581611990565b840191505092915050565b5f6080820190506120835f830187611a86565b6120906020830186611a86565b61209d6040830185611cb5565b81810360608301526120af8184612038565b905095945050505050565b5f815190506120c8816118e0565b92915050565b5f602082840312156120e3576120e26118ad565b5b5f6120f0848285016120ba565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6040820190506121395f830185611a86565b6121466020830184611cb5565b939250505056fea2646970667358221220b92bc390a36b007aac0697f56f2acfe66ef8c45c9008835c88dbabb6e867cd8164736f6c634300081c0033",
}

// LandABI is the input ABI used to generate the binding from.
// Deprecated: Use LandMetaData.ABI instead.
var LandABI = LandMetaData.ABI

// LandBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LandMetaData.Bin instead.
var LandBin = LandMetaData.Bin

// DeployLand deploys a new Ethereum contract, binding an instance of Land to it.
func DeployLand(auth *bind.TransactOpts, backend bind.ContractBackend, titleNo_ string, symbol_ string, owner_ common.Address, size_ *big.Int, tokenId_ *big.Int, registration_ *big.Int) (common.Address, *types.Transaction, *Land, error) {
	parsed, err := LandMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LandBin), backend, titleNo_, symbol_, owner_, size_, tokenId_, registration_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Land{LandCaller: LandCaller{contract: contract}, LandTransactor: LandTransactor{contract: contract}, LandFilterer: LandFilterer{contract: contract}}, nil
}

// Land is an auto generated Go binding around an Ethereum contract.
type Land struct {
	LandCaller     // Read-only binding to the contract
	LandTransactor // Write-only binding to the contract
	LandFilterer   // Log filterer for contract events
}

// LandCaller is an auto generated read-only Go binding around an Ethereum contract.
type LandCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LandTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LandTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LandFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LandFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LandSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LandSession struct {
	Contract     *Land             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LandCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LandCallerSession struct {
	Contract *LandCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// LandTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LandTransactorSession struct {
	Contract     *LandTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LandRaw is an auto generated low-level Go binding around an Ethereum contract.
type LandRaw struct {
	Contract *Land // Generic contract binding to access the raw methods on
}

// LandCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LandCallerRaw struct {
	Contract *LandCaller // Generic read-only contract binding to access the raw methods on
}

// LandTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LandTransactorRaw struct {
	Contract *LandTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLand creates a new instance of Land, bound to a specific deployed contract.
func NewLand(address common.Address, backend bind.ContractBackend) (*Land, error) {
	contract, err := bindLand(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Land{LandCaller: LandCaller{contract: contract}, LandTransactor: LandTransactor{contract: contract}, LandFilterer: LandFilterer{contract: contract}}, nil
}

// NewLandCaller creates a new read-only instance of Land, bound to a specific deployed contract.
func NewLandCaller(address common.Address, caller bind.ContractCaller) (*LandCaller, error) {
	contract, err := bindLand(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LandCaller{contract: contract}, nil
}

// NewLandTransactor creates a new write-only instance of Land, bound to a specific deployed contract.
func NewLandTransactor(address common.Address, transactor bind.ContractTransactor) (*LandTransactor, error) {
	contract, err := bindLand(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LandTransactor{contract: contract}, nil
}

// NewLandFilterer creates a new log filterer instance of Land, bound to a specific deployed contract.
func NewLandFilterer(address common.Address, filterer bind.ContractFilterer) (*LandFilterer, error) {
	contract, err := bindLand(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LandFilterer{contract: contract}, nil
}

// bindLand binds a generic wrapper to an already deployed contract.
func bindLand(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := LandMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Land *LandRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Land.Contract.LandCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Land *LandRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Land.Contract.LandTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Land *LandRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Land.Contract.LandTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Land *LandCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Land.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Land *LandTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Land.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Land *LandTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Land.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Land *LandCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Land.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Land *LandSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Land.Contract.BalanceOf(&_Land.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Land *LandCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Land.Contract.BalanceOf(&_Land.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Land *LandCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Land.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Land *LandSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Land.Contract.GetApproved(&_Land.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Land *LandCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Land.Contract.GetApproved(&_Land.CallOpts, tokenId)
}

// GetLand is a free data retrieval call binding the contract method 0x5690314c.
//
// Solidity: function getLand() view returns((string,uint256,string,address,uint256,uint256))
func (_Land *LandCaller) GetLand(opts *bind.CallOpts) (LandDetails, error) {
	var out []interface{}
	err := _Land.contract.Call(opts, &out, "getLand")

	if err != nil {
		return *new(LandDetails), err
	}

	out0 := *abi.ConvertType(out[0], new(LandDetails)).(*LandDetails)

	return out0, err

}

// GetLand is a free data retrieval call binding the contract method 0x5690314c.
//
// Solidity: function getLand() view returns((string,uint256,string,address,uint256,uint256))
func (_Land *LandSession) GetLand() (LandDetails, error) {
	return _Land.Contract.GetLand(&_Land.CallOpts)
}

// GetLand is a free data retrieval call binding the contract method 0x5690314c.
//
// Solidity: function getLand() view returns((string,uint256,string,address,uint256,uint256))
func (_Land *LandCallerSession) GetLand() (LandDetails, error) {
	return _Land.Contract.GetLand(&_Land.CallOpts)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Land *LandCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Land.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Land *LandSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Land.Contract.IsApprovedForAll(&_Land.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Land *LandCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Land.Contract.IsApprovedForAll(&_Land.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Land *LandCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Land.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Land *LandSession) Name() (string, error) {
	return _Land.Contract.Name(&_Land.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Land *LandCallerSession) Name() (string, error) {
	return _Land.Contract.Name(&_Land.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Land *LandCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Land.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Land *LandSession) Owner() (common.Address, error) {
	return _Land.Contract.Owner(&_Land.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Land *LandCallerSession) Owner() (common.Address, error) {
	return _Land.Contract.Owner(&_Land.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Land *LandCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Land.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Land *LandSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Land.Contract.OwnerOf(&_Land.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Land *LandCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Land.Contract.OwnerOf(&_Land.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Land *LandCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Land.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Land *LandSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Land.Contract.SupportsInterface(&_Land.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Land *LandCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Land.Contract.SupportsInterface(&_Land.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Land *LandCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Land.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Land *LandSession) Symbol() (string, error) {
	return _Land.Contract.Symbol(&_Land.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Land *LandCallerSession) Symbol() (string, error) {
	return _Land.Contract.Symbol(&_Land.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Land *LandCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Land.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Land *LandSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Land.Contract.TokenURI(&_Land.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Land *LandCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Land.Contract.TokenURI(&_Land.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Land *LandTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Land.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Land *LandSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Land.Contract.Approve(&_Land.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Land *LandTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Land.Contract.Approve(&_Land.TransactOpts, to, tokenId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Land *LandTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Land.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Land *LandSession) RenounceOwnership() (*types.Transaction, error) {
	return _Land.Contract.RenounceOwnership(&_Land.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Land *LandTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Land.Contract.RenounceOwnership(&_Land.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Land *LandTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Land.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Land *LandSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Land.Contract.SafeTransferFrom(&_Land.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Land *LandTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Land.Contract.SafeTransferFrom(&_Land.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Land *LandTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Land.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Land *LandSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Land.Contract.SafeTransferFrom0(&_Land.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Land *LandTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Land.Contract.SafeTransferFrom0(&_Land.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Land *LandTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Land.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Land *LandSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Land.Contract.SetApprovalForAll(&_Land.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Land *LandTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Land.Contract.SetApprovalForAll(&_Land.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Land *LandTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Land.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Land *LandSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Land.Contract.TransferFrom(&_Land.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Land *LandTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Land.Contract.TransferFrom(&_Land.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Land *LandTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Land.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Land *LandSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Land.Contract.TransferOwnership(&_Land.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Land *LandTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Land.Contract.TransferOwnership(&_Land.TransactOpts, newOwner)
}

// LandApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Land contract.
type LandApprovalIterator struct {
	Event *LandApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LandApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LandApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LandApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LandApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LandApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LandApproval represents a Approval event raised by the Land contract.
type LandApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Land *LandFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*LandApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Land.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &LandApprovalIterator{contract: _Land.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Land *LandFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *LandApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Land.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LandApproval)
				if err := _Land.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Land *LandFilterer) ParseApproval(log types.Log) (*LandApproval, error) {
	event := new(LandApproval)
	if err := _Land.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LandApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Land contract.
type LandApprovalForAllIterator struct {
	Event *LandApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LandApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LandApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LandApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LandApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LandApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LandApprovalForAll represents a ApprovalForAll event raised by the Land contract.
type LandApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Land *LandFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*LandApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Land.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &LandApprovalForAllIterator{contract: _Land.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Land *LandFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *LandApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Land.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LandApprovalForAll)
				if err := _Land.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Land *LandFilterer) ParseApprovalForAll(log types.Log) (*LandApprovalForAll, error) {
	event := new(LandApprovalForAll)
	if err := _Land.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LandOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Land contract.
type LandOwnershipTransferredIterator struct {
	Event *LandOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LandOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LandOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LandOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LandOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LandOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LandOwnershipTransferred represents a OwnershipTransferred event raised by the Land contract.
type LandOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Land *LandFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*LandOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Land.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &LandOwnershipTransferredIterator{contract: _Land.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Land *LandFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *LandOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Land.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LandOwnershipTransferred)
				if err := _Land.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Land *LandFilterer) ParseOwnershipTransferred(log types.Log) (*LandOwnershipTransferred, error) {
	event := new(LandOwnershipTransferred)
	if err := _Land.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LandTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Land contract.
type LandTransferIterator struct {
	Event *LandTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LandTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LandTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LandTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LandTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LandTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LandTransfer represents a Transfer event raised by the Land contract.
type LandTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Land *LandFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*LandTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Land.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &LandTransferIterator{contract: _Land.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Land *LandFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *LandTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Land.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LandTransfer)
				if err := _Land.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Land *LandFilterer) ParseTransfer(log types.Log) (*LandTransfer, error) {
	event := new(LandTransfer)
	if err := _Land.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
