input CreateOnboardingInput {
  email: String!

  titleUrl: String!

  supportdocUrl: String!

  displayPictureUrl: String!
}

input CreateUserInput {
  email: String!

  firstname: String!

  lastname: String!

  supportDocId: UUID!

  supportDocVerification: Verification!
}

type DisplayPicture {
  id: UUID!

  url: String!

  email: String!

  verified: Verification!

  created_at: Time!

  updated_at: Time!
}

input GetOnboardingByEmailAndVerificationInput {
  email: String!

  verification: Verification!
}

input GetUserLandsInput {
  email: String!

  verification: Verification!
}

type Mutation {
  chargeMpesa(input: PayWithMpesaInput!): String

  createOnboarding(input: CreateOnboardingInput!): Onboarding!

  updateTitleVerificationById(input: UpdateTitleVerificationByIdInput!): Title!

  createUser(input: CreateUserInput!): User!

  updateDisplayPictureVerificationById(input: UpdateDisplayPictureVerificationByIdInput!): DisplayPicture!
}

type Onboarding {
  id: UUID!

  email: String!

  titleId: UUID!

  title: Title!

  supportDocId: UUID!

  supportingDoc: SupportingDoc!

  displayPictureId: UUID!

  displayPicture: DisplayPicture!

  verification: Verification!

  created_at: Time!

  updated_at: Time!
}

enum PaidFor {
  PAID

  NOT_PAID
}

input PayWithMpesaInput {
  reason: PaymentReason!

  phone: String!

  email: String!

  currency: String!

  paymentFor: UUID!
}

type Payment {
  id: UUID!

  reference_id: String!

  status: String!

  email: String!

  onboarding: Onboarding

  onboarding_id: UUID!

  created_at: Time!

  updated_at: Time!
}

enum PaymentReason {
  LAND_REGISTRY
}

enum PaymentStatus {
  success

  failed

  pending

  timeout
}

type PaymentUpdate {
  referenceId: String!

  status: String!

  email: String!
}

type Query {
  getUserLands(input: GetUserLandsInput!): [Title!]!

  getPaymentsByStatus(status: PaymentStatus!): [Payment!]!

  getTitleById(id: UUID!): Title!

  getSupportingDocById(id: UUID!): SupportingDoc!

  getDisplayPictureById(id: UUID!): DisplayPicture!

  getOnboardingByEmailAndVerification(input: GetOnboardingByEmailAndVerificationInput!): Onboarding!
}

type Subscription {
  paymentUpdate(email: String!): PaymentUpdate!
}

type SupportingDoc {
  id: UUID!

  url: String!

  email: String!

  verified: Verification!

  created_at: Time!

  updated_at: Time!
}

scalar Time

type Title {
  id: UUID!

  url: String!

  verified: Verification!

  support_doc_id: UUID!

  created_at: Time!

  updated_at: Time!
}

scalar UUID

input UpdateDisplayPictureVerificationByIdInput {
  displayPictureId: UUID!

  verification: Verification!
}

input UpdateTitleVerificationByIdInput {
  titleId: UUID!

  verification: Verification!
}

type User {
  id: UUID!

  firstname: String

  lastname: String

  email: String!

  created_at: Time!

  updated_at: Time!
}

enum Verification {
  ONBOARDING

  VERIFIED

  REJECTED
}

type __Directive {
  name: String!

  description: String

  locations: [__DirectiveLocation!]!

  args: [__InputValue!]!

  isRepeatable: Boolean!
}

enum __DirectiveLocation {
  QUERY

  MUTATION

  SUBSCRIPTION

  FIELD

  FRAGMENT_DEFINITION

  FRAGMENT_SPREAD

  INLINE_FRAGMENT

  VARIABLE_DEFINITION

  SCHEMA

  SCALAR

  OBJECT

  FIELD_DEFINITION

  ARGUMENT_DEFINITION

  INTERFACE

  UNION

  ENUM

  ENUM_VALUE

  INPUT_OBJECT

  INPUT_FIELD_DEFINITION
}

type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

type __Field {
  name: String!

  description: String

  args: [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

type __InputValue {
  name: String!

  description: String

  type: __Type!

  defaultValue: String
}

type __Schema {
  description: String

  types: [__Type!]!

  queryType: __Type!

  mutationType: __Type

  subscriptionType: __Type

  directives: [__Directive!]!
}

type __Type {
  kind: __TypeKind!

  name: String

  description: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields: [__InputValue!]

  ofType: __Type

  specifiedByURL: String
}

enum __TypeKind {
  SCALAR

  OBJECT

  INTERFACE

  UNION

  ENUM

  INPUT_OBJECT

  LIST

  NON_NULL
}

"""
The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.
"""
directive @defer (if: Boolean = true, label: String) on FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.
"""
directive @deprecated (reason: String = "No longer supported") on FIELD_DEFINITION|ARGUMENT_DEFINITION|INPUT_FIELD_DEFINITION|ENUM_VALUE

"""
The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.
"""
directive @include (if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.
"""
directive @skip (if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.
"""
directive @specifiedBy (url: String!) on SCALAR

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
